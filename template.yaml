AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  age-backend
  SAM template for deploying Age backend service in AWS.

# More info about Globals:
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3


Parameters:
  GoogleProjectId:
    Type: String
    Description: ID of the Google Project
  GoogleApplicationCredentials:
    Type: String
    Description: File name of the JSON file that contains your service account key


Resources:

  # API definition in API Gateway
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: 2.0
        info:
          title: AgeApi
        basePath: /Prod
        schemes:
        - https
        paths:
          /:
            x-amazon-apigateway-any-method:
              produces:
              - application/json
              responses:
                '200':
                  description: 200 response
                  schema:
                    $ref: "#/definitions/Empty"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: 200
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${!stageVariables.FunctionName}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
              - application/json
              parameters:
              - name: proxy
                in: path
                required: true
                type: string
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${!stageVariables.FunctionName}/invocations"
                httpMethod: POST
                type: aws_proxy
        x-amazon-apigateway-binary-media-types:
          - '*/*'
        definitions:
          Empty:
            type: object
            title: Empty Schema

      Variables:
        FunctionName: !Ref ApiFunction


  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: lambda.handler
      Runtime: nodejs8.10
      Timeout: 3
      MemorySize: 512
      Environment:
        Variables:
          GOOGLE_PROJECT_ID: !Ref GoogleProjectId
          GOOGLE_APPLICATION_CREDENTIALS: !Ref GoogleApplicationCredentials
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: any
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: any

Outputs:

  ApiUrl:
    Description: Invoke URL for your API.
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/${ApiGatewayApi}/stages/Prod"

  ApiFunctionArn:
    Description: "API Function ARN"
    Value: !GetAtt ApiFunction.Arn
